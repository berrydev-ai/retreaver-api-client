/* tslint:disable */
/* eslint-disable */
/**
 * Retreaver Core API
 * The Retreaver Core API can be used to automate core business processes, like changing where calls are routed, and many other features that would normally be accessed through our account portal.  **Authentication**: All requests require an API key passed as a query parameter `api_key`. If you have access to multiple companies, also pass `company_id`.  **Format**: The API supports both JSON and XML. Use `.json` or `.xml` file extensions in the URL and set the appropriate Content-Type header.  **Pagination**: Returns 25 results per page. Use the Link HTTP header to navigate pages.  **Security Warning**: Never expose your API key publicly as it can be used to access your entire Retreaver account without restriction!
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base';
// @ts-ignore
import type { AffiliateCreateRequest } from '../models';
// @ts-ignore
import type { AffiliateUpdateRequest } from '../models';
// @ts-ignore
import type { AffiliateWrapper } from '../models';
/**
 * AffiliatesApi - axios parameter creator
 */
export const AffiliatesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create a new affiliate with identifying information.
     * @summary Create an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {AffiliateCreateRequest} affiliateCreateRequest
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAffiliate: async (
      apiKey: string,
      affiliateCreateRequest: AffiliateCreateRequest,
      companyId?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiKey' is not null or undefined
      assertParamExists('createAffiliate', 'apiKey', apiKey);
      // verify required parameter 'affiliateCreateRequest' is not null or undefined
      assertParamExists('createAffiliate', 'affiliateCreateRequest', affiliateCreateRequest);
      const localVarPath = `/affiliates.json`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarQueryParameter, 'api_key', configuration);

      if (apiKey !== undefined) {
        localVarQueryParameter['api_key'] = apiKey;
      }

      if (companyId !== undefined) {
        localVarQueryParameter['company_id'] = companyId;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        affiliateCreateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an affiliate. You must delete any numbers associated with the affiliate first.
     * @summary Delete an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAffiliate: async (
      apiKey: string,
      afid: string,
      companyId?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiKey' is not null or undefined
      assertParamExists('deleteAffiliate', 'apiKey', apiKey);
      // verify required parameter 'afid' is not null or undefined
      assertParamExists('deleteAffiliate', 'afid', afid);
      const localVarPath = `/affiliates/afid/{afid}.json`.replace(
        `{${'afid'}}`,
        encodeURIComponent(String(afid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarQueryParameter, 'api_key', configuration);

      if (apiKey !== undefined) {
        localVarQueryParameter['api_key'] = apiKey;
      }

      if (companyId !== undefined) {
        localVarQueryParameter['company_id'] = companyId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve an affiliate using your custom affiliate ID.
     * @summary Get a specific affiliate by AFID
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid The custom affiliate ID
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAffiliateByAfid: async (
      apiKey: string,
      afid: string,
      companyId?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiKey' is not null or undefined
      assertParamExists('getAffiliateByAfid', 'apiKey', apiKey);
      // verify required parameter 'afid' is not null or undefined
      assertParamExists('getAffiliateByAfid', 'afid', afid);
      const localVarPath = `/affiliates/afid/{afid}.json`.replace(
        `{${'afid'}}`,
        encodeURIComponent(String(afid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarQueryParameter, 'api_key', configuration);

      if (apiKey !== undefined) {
        localVarQueryParameter['api_key'] = apiKey;
      }

      if (companyId !== undefined) {
        localVarQueryParameter['company_id'] = companyId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve a complete list of affiliates. Affiliates are also known as Publishers or Sources.
     * @summary Get all affiliates
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAffiliates: async (
      apiKey: string,
      companyId?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiKey' is not null or undefined
      assertParamExists('getAffiliates', 'apiKey', apiKey);
      const localVarPath = `/affiliates.json`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarQueryParameter, 'api_key', configuration);

      if (apiKey !== undefined) {
        localVarQueryParameter['api_key'] = apiKey;
      }

      if (companyId !== undefined) {
        localVarQueryParameter['company_id'] = companyId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update any attributes of an existing affiliate.
     * @summary Update an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid
     * @param {AffiliateUpdateRequest} affiliateUpdateRequest
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAffiliate: async (
      apiKey: string,
      afid: string,
      affiliateUpdateRequest: AffiliateUpdateRequest,
      companyId?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiKey' is not null or undefined
      assertParamExists('updateAffiliate', 'apiKey', apiKey);
      // verify required parameter 'afid' is not null or undefined
      assertParamExists('updateAffiliate', 'afid', afid);
      // verify required parameter 'affiliateUpdateRequest' is not null or undefined
      assertParamExists('updateAffiliate', 'affiliateUpdateRequest', affiliateUpdateRequest);
      const localVarPath = `/affiliates/afid/{afid}.json`.replace(
        `{${'afid'}}`,
        encodeURIComponent(String(afid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarQueryParameter, 'api_key', configuration);

      if (apiKey !== undefined) {
        localVarQueryParameter['api_key'] = apiKey;
      }

      if (companyId !== undefined) {
        localVarQueryParameter['company_id'] = companyId;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        affiliateUpdateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AffiliatesApi - functional programming interface
 */
export const AffiliatesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AffiliatesApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new affiliate with identifying information.
     * @summary Create an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {AffiliateCreateRequest} affiliateCreateRequest
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAffiliate(
      apiKey: string,
      affiliateCreateRequest: AffiliateCreateRequest,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffiliateWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAffiliate(
        apiKey,
        affiliateCreateRequest,
        companyId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AffiliatesApi.createAffiliate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete an affiliate. You must delete any numbers associated with the affiliate first.
     * @summary Delete an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAffiliate(
      apiKey: string,
      afid: string,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAffiliate(
        apiKey,
        afid,
        companyId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AffiliatesApi.deleteAffiliate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve an affiliate using your custom affiliate ID.
     * @summary Get a specific affiliate by AFID
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid The custom affiliate ID
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAffiliateByAfid(
      apiKey: string,
      afid: string,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffiliateWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliateByAfid(
        apiKey,
        afid,
        companyId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AffiliatesApi.getAffiliateByAfid']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve a complete list of affiliates. Affiliates are also known as Publishers or Sources.
     * @summary Get all affiliates
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAffiliates(
      apiKey: string,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AffiliateWrapper>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliates(
        apiKey,
        companyId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AffiliatesApi.getAffiliates']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update any attributes of an existing affiliate.
     * @summary Update an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid
     * @param {AffiliateUpdateRequest} affiliateUpdateRequest
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAffiliate(
      apiKey: string,
      afid: string,
      affiliateUpdateRequest: AffiliateUpdateRequest,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffiliateWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateAffiliate(
        apiKey,
        afid,
        affiliateUpdateRequest,
        companyId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AffiliatesApi.updateAffiliate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AffiliatesApi - factory interface
 */
export const AffiliatesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AffiliatesApiFp(configuration);
  return {
    /**
     * Create a new affiliate with identifying information.
     * @summary Create an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {AffiliateCreateRequest} affiliateCreateRequest
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAffiliate(
      apiKey: string,
      affiliateCreateRequest: AffiliateCreateRequest,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AffiliateWrapper> {
      return localVarFp
        .createAffiliate(apiKey, affiliateCreateRequest, companyId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Delete an affiliate. You must delete any numbers associated with the affiliate first.
     * @summary Delete an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAffiliate(
      apiKey: string,
      afid: string,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteAffiliate(apiKey, afid, companyId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Retrieve an affiliate using your custom affiliate ID.
     * @summary Get a specific affiliate by AFID
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid The custom affiliate ID
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAffiliateByAfid(
      apiKey: string,
      afid: string,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AffiliateWrapper> {
      return localVarFp
        .getAffiliateByAfid(apiKey, afid, companyId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Retrieve a complete list of affiliates. Affiliates are also known as Publishers or Sources.
     * @summary Get all affiliates
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAffiliates(
      apiKey: string,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<AffiliateWrapper>> {
      return localVarFp
        .getAffiliates(apiKey, companyId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Update any attributes of an existing affiliate.
     * @summary Update an affiliate
     * @param {string} apiKey Your Retreaver API key
     * @param {string} afid
     * @param {AffiliateUpdateRequest} affiliateUpdateRequest
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAffiliate(
      apiKey: string,
      afid: string,
      affiliateUpdateRequest: AffiliateUpdateRequest,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AffiliateWrapper> {
      return localVarFp
        .updateAffiliate(apiKey, afid, affiliateUpdateRequest, companyId, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * AffiliatesApi - object-oriented interface
 */
export class AffiliatesApi extends BaseAPI {
  /**
   * Create a new affiliate with identifying information.
   * @summary Create an affiliate
   * @param {string} apiKey Your Retreaver API key
   * @param {AffiliateCreateRequest} affiliateCreateRequest
   * @param {number} [companyId] Required if you have access to multiple companies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public createAffiliate(
    apiKey: string,
    affiliateCreateRequest: AffiliateCreateRequest,
    companyId?: number,
    options?: RawAxiosRequestConfig
  ) {
    return AffiliatesApiFp(this.configuration)
      .createAffiliate(apiKey, affiliateCreateRequest, companyId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Delete an affiliate. You must delete any numbers associated with the affiliate first.
   * @summary Delete an affiliate
   * @param {string} apiKey Your Retreaver API key
   * @param {string} afid
   * @param {number} [companyId] Required if you have access to multiple companies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public deleteAffiliate(
    apiKey: string,
    afid: string,
    companyId?: number,
    options?: RawAxiosRequestConfig
  ) {
    return AffiliatesApiFp(this.configuration)
      .deleteAffiliate(apiKey, afid, companyId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retrieve an affiliate using your custom affiliate ID.
   * @summary Get a specific affiliate by AFID
   * @param {string} apiKey Your Retreaver API key
   * @param {string} afid The custom affiliate ID
   * @param {number} [companyId] Required if you have access to multiple companies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getAffiliateByAfid(
    apiKey: string,
    afid: string,
    companyId?: number,
    options?: RawAxiosRequestConfig
  ) {
    return AffiliatesApiFp(this.configuration)
      .getAffiliateByAfid(apiKey, afid, companyId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retrieve a complete list of affiliates. Affiliates are also known as Publishers or Sources.
   * @summary Get all affiliates
   * @param {string} apiKey Your Retreaver API key
   * @param {number} [companyId] Required if you have access to multiple companies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getAffiliates(apiKey: string, companyId?: number, options?: RawAxiosRequestConfig) {
    return AffiliatesApiFp(this.configuration)
      .getAffiliates(apiKey, companyId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Update any attributes of an existing affiliate.
   * @summary Update an affiliate
   * @param {string} apiKey Your Retreaver API key
   * @param {string} afid
   * @param {AffiliateUpdateRequest} affiliateUpdateRequest
   * @param {number} [companyId] Required if you have access to multiple companies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public updateAffiliate(
    apiKey: string,
    afid: string,
    affiliateUpdateRequest: AffiliateUpdateRequest,
    companyId?: number,
    options?: RawAxiosRequestConfig
  ) {
    return AffiliatesApiFp(this.configuration)
      .updateAffiliate(apiKey, afid, affiliateUpdateRequest, companyId, options)
      .then(request => request(this.axios, this.basePath));
  }
}
