/* tslint:disable */
/* eslint-disable */
/**
 * Retreaver Core API
 * The Retreaver Core API can be used to automate core business processes, like changing where calls are routed, and many other features that would normally be accessed through our account portal.  **Authentication**: All requests require an API key passed as a query parameter `api_key`. If you have access to multiple companies, also pass `company_id`.  **Format**: The API supports both JSON and XML. Use `.json` or `.xml` file extensions in the URL and set the appropriate Content-Type header.  **Pagination**: Returns 25 results per page. Use the Link HTTP header to navigate pages.  **Security Warning**: Never expose your API key publicly as it can be used to access your entire Retreaver account without restriction!
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CallV1Wrapper } from '../models';
/**
 * CallsApi - axios parameter creator
 */
export const CallsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve detailed information about a specific call using its UUID.
         * @summary Get a specific call by UUID (V1)
         * @param {string} apiKey Your Retreaver API key
         * @param {string} uuid The UUID of the call
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallByUuidV1: async (apiKey: string, uuid: string, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getCallByUuidV1', 'apiKey', apiKey)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getCallByUuidV1', 'uuid', uuid)
            const localVarPath = `/calls/{uuid}.json`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides access to the call log containing all calls made through numbers under your control.
         * @summary Get recent calls (V1)
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {string} [createdAtStart] Return calls created after this date (RFC3339 format)
         * @param {string} [createdAtEnd] Return calls created before this date (RFC3339 format)
         * @param {GetCallsV1SortByEnum} [sortBy] Sort calls by this field
         * @param {GetCallsV1OrderEnum} [order] Sort order (Note: updated_at always returns desc)
         * @param {string} [caller] Filter by caller number (URL encoded, e.g., %2B13015236555)
         * @param {string} [clientAfid] Filter by affiliate ID
         * @param {string} [clientCid] Filter by campaign ID
         * @param {string} [clientTid] Filter by target ID
         * @param {string} [subId] Filter by affiliate Sub ID
         * @param {number} [page] Page number for pagination (25 results per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallsV1: async (apiKey: string, companyId?: number, createdAtStart?: string, createdAtEnd?: string, sortBy?: GetCallsV1SortByEnum, order?: GetCallsV1OrderEnum, caller?: string, clientAfid?: string, clientCid?: string, clientTid?: string, subId?: string, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getCallsV1', 'apiKey', apiKey)
            const localVarPath = `/calls.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (createdAtStart !== undefined) {
                localVarQueryParameter['created_at_start'] = (createdAtStart as any instanceof Date) ?
                    (createdAtStart as any).toISOString() :
                    createdAtStart;
            }

            if (createdAtEnd !== undefined) {
                localVarQueryParameter['created_at_end'] = (createdAtEnd as any instanceof Date) ?
                    (createdAtEnd as any).toISOString() :
                    createdAtEnd;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (caller !== undefined) {
                localVarQueryParameter['caller'] = caller;
            }

            if (clientAfid !== undefined) {
                localVarQueryParameter['client_afid'] = clientAfid;
            }

            if (clientCid !== undefined) {
                localVarQueryParameter['client_cid'] = clientCid;
            }

            if (clientTid !== undefined) {
                localVarQueryParameter['client_tid'] = clientTid;
            }

            if (subId !== undefined) {
                localVarQueryParameter['sub_id'] = subId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallsApi - functional programming interface
 */
export const CallsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve detailed information about a specific call using its UUID.
         * @summary Get a specific call by UUID (V1)
         * @param {string} apiKey Your Retreaver API key
         * @param {string} uuid The UUID of the call
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallByUuidV1(apiKey: string, uuid: string, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallV1Wrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallByUuidV1(apiKey, uuid, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallsApi.getCallByUuidV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides access to the call log containing all calls made through numbers under your control.
         * @summary Get recent calls (V1)
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {string} [createdAtStart] Return calls created after this date (RFC3339 format)
         * @param {string} [createdAtEnd] Return calls created before this date (RFC3339 format)
         * @param {GetCallsV1SortByEnum} [sortBy] Sort calls by this field
         * @param {GetCallsV1OrderEnum} [order] Sort order (Note: updated_at always returns desc)
         * @param {string} [caller] Filter by caller number (URL encoded, e.g., %2B13015236555)
         * @param {string} [clientAfid] Filter by affiliate ID
         * @param {string} [clientCid] Filter by campaign ID
         * @param {string} [clientTid] Filter by target ID
         * @param {string} [subId] Filter by affiliate Sub ID
         * @param {number} [page] Page number for pagination (25 results per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallsV1(apiKey: string, companyId?: number, createdAtStart?: string, createdAtEnd?: string, sortBy?: GetCallsV1SortByEnum, order?: GetCallsV1OrderEnum, caller?: string, clientAfid?: string, clientCid?: string, clientTid?: string, subId?: string, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CallV1Wrapper>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallsV1(apiKey, companyId, createdAtStart, createdAtEnd, sortBy, order, caller, clientAfid, clientCid, clientTid, subId, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallsApi.getCallsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CallsApi - factory interface
 */
export const CallsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallsApiFp(configuration)
    return {
        /**
         * Retrieve detailed information about a specific call using its UUID.
         * @summary Get a specific call by UUID (V1)
         * @param {string} apiKey Your Retreaver API key
         * @param {string} uuid The UUID of the call
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallByUuidV1(apiKey: string, uuid: string, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<CallV1Wrapper> {
            return localVarFp.getCallByUuidV1(apiKey, uuid, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides access to the call log containing all calls made through numbers under your control.
         * @summary Get recent calls (V1)
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {string} [createdAtStart] Return calls created after this date (RFC3339 format)
         * @param {string} [createdAtEnd] Return calls created before this date (RFC3339 format)
         * @param {GetCallsV1SortByEnum} [sortBy] Sort calls by this field
         * @param {GetCallsV1OrderEnum} [order] Sort order (Note: updated_at always returns desc)
         * @param {string} [caller] Filter by caller number (URL encoded, e.g., %2B13015236555)
         * @param {string} [clientAfid] Filter by affiliate ID
         * @param {string} [clientCid] Filter by campaign ID
         * @param {string} [clientTid] Filter by target ID
         * @param {string} [subId] Filter by affiliate Sub ID
         * @param {number} [page] Page number for pagination (25 results per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallsV1(apiKey: string, companyId?: number, createdAtStart?: string, createdAtEnd?: string, sortBy?: GetCallsV1SortByEnum, order?: GetCallsV1OrderEnum, caller?: string, clientAfid?: string, clientCid?: string, clientTid?: string, subId?: string, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CallV1Wrapper>> {
            return localVarFp.getCallsV1(apiKey, companyId, createdAtStart, createdAtEnd, sortBy, order, caller, clientAfid, clientCid, clientTid, subId, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallsApi - object-oriented interface
 */
export class CallsApi extends BaseAPI {
    /**
     * Retrieve detailed information about a specific call using its UUID.
     * @summary Get a specific call by UUID (V1)
     * @param {string} apiKey Your Retreaver API key
     * @param {string} uuid The UUID of the call
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCallByUuidV1(apiKey: string, uuid: string, companyId?: number, options?: RawAxiosRequestConfig) {
        return CallsApiFp(this.configuration).getCallByUuidV1(apiKey, uuid, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides access to the call log containing all calls made through numbers under your control.
     * @summary Get recent calls (V1)
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {string} [createdAtStart] Return calls created after this date (RFC3339 format)
     * @param {string} [createdAtEnd] Return calls created before this date (RFC3339 format)
     * @param {GetCallsV1SortByEnum} [sortBy] Sort calls by this field
     * @param {GetCallsV1OrderEnum} [order] Sort order (Note: updated_at always returns desc)
     * @param {string} [caller] Filter by caller number (URL encoded, e.g., %2B13015236555)
     * @param {string} [clientAfid] Filter by affiliate ID
     * @param {string} [clientCid] Filter by campaign ID
     * @param {string} [clientTid] Filter by target ID
     * @param {string} [subId] Filter by affiliate Sub ID
     * @param {number} [page] Page number for pagination (25 results per page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCallsV1(apiKey: string, companyId?: number, createdAtStart?: string, createdAtEnd?: string, sortBy?: GetCallsV1SortByEnum, order?: GetCallsV1OrderEnum, caller?: string, clientAfid?: string, clientCid?: string, clientTid?: string, subId?: string, page?: number, options?: RawAxiosRequestConfig) {
        return CallsApiFp(this.configuration).getCallsV1(apiKey, companyId, createdAtStart, createdAtEnd, sortBy, order, caller, clientAfid, clientCid, clientTid, subId, page, options).then((request) => request(this.axios, this.basePath));
    }
}

export enum GetCallsV1SortByEnum {
    CreatedAt = 'created_at',
    UpdatedAt = 'updated_at'
}
export enum GetCallsV1OrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
