/* tslint:disable */
/* eslint-disable */
/**
 * Retreaver Core API
 * The Retreaver Core API can be used to automate core business processes, like changing where calls are routed, and many other features that would normally be accessed through our account portal.  **Authentication**: All requests require an API key passed as a query parameter `api_key`. If you have access to multiple companies, also pass `company_id`.  **Format**: The API supports both JSON and XML. Use `.json` or `.xml` file extensions in the URL and set the appropriate Content-Type header.  **Pagination**: Returns 25 results per page. Use the Link HTTP header to navigate pages.  **Security Warning**: Never expose your API key publicly as it can be used to access your entire Retreaver account without restriction!
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CampaignCreateRequest } from '../models';
// @ts-ignore
import type { CampaignUpdateRequest } from '../models';
// @ts-ignore
import type { CampaignWrapper } from '../models';
/**
 * CampaignsApi - axios parameter creator
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new campaign with greeting, timers, and menu options.
         * @summary Create a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {CampaignCreateRequest} campaignCreateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign: async (apiKey: string, campaignCreateRequest: CampaignCreateRequest, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('createCampaign', 'apiKey', apiKey)
            // verify required parameter 'campaignCreateRequest' is not null or undefined
            assertParamExists('createCampaign', 'campaignCreateRequest', campaignCreateRequest)
            const localVarPath = `/campaigns.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a campaign. You must delete all numbers belonging to the campaign first.
         * @summary Delete a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaign: async (apiKey: string, cid: string, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('deleteCampaign', 'apiKey', apiKey)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('deleteCampaign', 'cid', cid)
            const localVarPath = `/campaigns/cid/{cid}.json`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a campaign using your custom campaign ID.
         * @summary Get a specific campaign by CID
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid The custom campaign ID
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignByCid: async (apiKey: string, cid: string, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getCampaignByCid', 'apiKey', apiKey)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getCampaignByCid', 'cid', cid)
            const localVarPath = `/campaigns/cid/{cid}.json`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all campaigns with their routing settings and IVR configuration.
         * @summary Get all campaigns
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaigns: async (apiKey: string, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getCampaigns', 'apiKey', apiKey)
            const localVarPath = `/campaigns.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update any attributes of an existing campaign.
         * @summary Update a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid 
         * @param {CampaignUpdateRequest} campaignUpdateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaign: async (apiKey: string, cid: string, campaignUpdateRequest: CampaignUpdateRequest, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('updateCampaign', 'apiKey', apiKey)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateCampaign', 'cid', cid)
            // verify required parameter 'campaignUpdateRequest' is not null or undefined
            assertParamExists('updateCampaign', 'campaignUpdateRequest', campaignUpdateRequest)
            const localVarPath = `/campaigns/cid/{cid}.json`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new campaign with greeting, timers, and menu options.
         * @summary Create a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {CampaignCreateRequest} campaignCreateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaign(apiKey: string, campaignCreateRequest: CampaignCreateRequest, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaign(apiKey, campaignCreateRequest, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.createCampaign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a campaign. You must delete all numbers belonging to the campaign first.
         * @summary Delete a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCampaign(apiKey: string, cid: string, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCampaign(apiKey, cid, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.deleteCampaign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a campaign using your custom campaign ID.
         * @summary Get a specific campaign by CID
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid The custom campaign ID
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignByCid(apiKey: string, cid: string, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignByCid(apiKey, cid, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaignByCid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all campaigns with their routing settings and IVR configuration.
         * @summary Get all campaigns
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaigns(apiKey: string, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignWrapper>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaigns(apiKey, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaigns']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update any attributes of an existing campaign.
         * @summary Update a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid 
         * @param {CampaignUpdateRequest} campaignUpdateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaign(apiKey: string, cid: string, campaignUpdateRequest: CampaignUpdateRequest, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampaign(apiKey, cid, campaignUpdateRequest, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.updateCampaign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CampaignsApi - factory interface
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * Create a new campaign with greeting, timers, and menu options.
         * @summary Create a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {CampaignCreateRequest} campaignCreateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign(apiKey: string, campaignCreateRequest: CampaignCreateRequest, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<CampaignWrapper> {
            return localVarFp.createCampaign(apiKey, campaignCreateRequest, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a campaign. You must delete all numbers belonging to the campaign first.
         * @summary Delete a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaign(apiKey: string, cid: string, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCampaign(apiKey, cid, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a campaign using your custom campaign ID.
         * @summary Get a specific campaign by CID
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid The custom campaign ID
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignByCid(apiKey: string, cid: string, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<CampaignWrapper> {
            return localVarFp.getCampaignByCid(apiKey, cid, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all campaigns with their routing settings and IVR configuration.
         * @summary Get all campaigns
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaigns(apiKey: string, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CampaignWrapper>> {
            return localVarFp.getCampaigns(apiKey, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update any attributes of an existing campaign.
         * @summary Update a campaign
         * @param {string} apiKey Your Retreaver API key
         * @param {string} cid 
         * @param {CampaignUpdateRequest} campaignUpdateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaign(apiKey: string, cid: string, campaignUpdateRequest: CampaignUpdateRequest, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<CampaignWrapper> {
            return localVarFp.updateCampaign(apiKey, cid, campaignUpdateRequest, companyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignsApi - object-oriented interface
 */
export class CampaignsApi extends BaseAPI {
    /**
     * Create a new campaign with greeting, timers, and menu options.
     * @summary Create a campaign
     * @param {string} apiKey Your Retreaver API key
     * @param {CampaignCreateRequest} campaignCreateRequest 
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createCampaign(apiKey: string, campaignCreateRequest: CampaignCreateRequest, companyId?: number, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).createCampaign(apiKey, campaignCreateRequest, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a campaign. You must delete all numbers belonging to the campaign first.
     * @summary Delete a campaign
     * @param {string} apiKey Your Retreaver API key
     * @param {string} cid 
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteCampaign(apiKey: string, cid: string, companyId?: number, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).deleteCampaign(apiKey, cid, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a campaign using your custom campaign ID.
     * @summary Get a specific campaign by CID
     * @param {string} apiKey Your Retreaver API key
     * @param {string} cid The custom campaign ID
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCampaignByCid(apiKey: string, cid: string, companyId?: number, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaignByCid(apiKey, cid, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all campaigns with their routing settings and IVR configuration.
     * @summary Get all campaigns
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCampaigns(apiKey: string, companyId?: number, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaigns(apiKey, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update any attributes of an existing campaign.
     * @summary Update a campaign
     * @param {string} apiKey Your Retreaver API key
     * @param {string} cid 
     * @param {CampaignUpdateRequest} campaignUpdateRequest 
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateCampaign(apiKey: string, cid: string, campaignUpdateRequest: CampaignUpdateRequest, companyId?: number, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).updateCampaign(apiKey, cid, campaignUpdateRequest, companyId, options).then((request) => request(this.axios, this.basePath));
    }
}

