/* tslint:disable */
/* eslint-disable */
/**
 * Retreaver Core API
 * The Retreaver Core API can be used to automate core business processes, like changing where calls are routed, and many other features that would normally be accessed through our account portal.  **Authentication**: All requests require an API key passed as a query parameter `api_key`. If you have access to multiple companies, also pass `company_id`.  **Format**: The API supports both JSON and XML. Use `.json` or `.xml` file extensions in the URL and set the appropriate Content-Type header.  **Pagination**: Returns 25 results per page. Use the Link HTTP header to navigate pages.  **Security Warning**: Never expose your API key publicly as it can be used to access your entire Retreaver account without restriction!
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base';
// @ts-ignore
import type { NumberWrapper } from '../models';
/**
 * NumbersApi - axios parameter creator
 */
export const NumbersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Retrieve all phone numbers routed to campaigns.
     * @summary Get all numbers
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNumbers: async (
      apiKey: string,
      companyId?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiKey' is not null or undefined
      assertParamExists('getNumbers', 'apiKey', apiKey);
      const localVarPath = `/numbers.json`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarQueryParameter, 'api_key', configuration);

      if (apiKey !== undefined) {
        localVarQueryParameter['api_key'] = apiKey;
      }

      if (companyId !== undefined) {
        localVarQueryParameter['company_id'] = companyId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * NumbersApi - functional programming interface
 */
export const NumbersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NumbersApiAxiosParamCreator(configuration);
  return {
    /**
     * Retrieve all phone numbers routed to campaigns.
     * @summary Get all numbers
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNumbers(
      apiKey: string,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NumberWrapper>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getNumbers(
        apiKey,
        companyId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['NumbersApi.getNumbers']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * NumbersApi - factory interface
 */
export const NumbersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = NumbersApiFp(configuration);
  return {
    /**
     * Retrieve all phone numbers routed to campaigns.
     * @summary Get all numbers
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNumbers(
      apiKey: string,
      companyId?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<NumberWrapper>> {
      return localVarFp
        .getNumbers(apiKey, companyId, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * NumbersApi - object-oriented interface
 */
export class NumbersApi extends BaseAPI {
  /**
   * Retrieve all phone numbers routed to campaigns.
   * @summary Get all numbers
   * @param {string} apiKey Your Retreaver API key
   * @param {number} [companyId] Required if you have access to multiple companies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  public getNumbers(apiKey: string, companyId?: number, options?: RawAxiosRequestConfig) {
    return NumbersApiFp(this.configuration)
      .getNumbers(apiKey, companyId, options)
      .then(request => request(this.axios, this.basePath));
  }
}
