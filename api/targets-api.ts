/* tslint:disable */
/* eslint-disable */
/**
 * Retreaver Core API
 * The Retreaver Core API can be used to automate core business processes, like changing where calls are routed, and many other features that would normally be accessed through our account portal.  **Authentication**: All requests require an API key passed as a query parameter `api_key`. If you have access to multiple companies, also pass `company_id`.  **Format**: The API supports both JSON and XML. Use `.json` or `.xml` file extensions in the URL and set the appropriate Content-Type header.  **Pagination**: Returns 25 results per page. Use the Link HTTP header to navigate pages.  **Security Warning**: Never expose your API key publicly as it can be used to access your entire Retreaver account without restriction!
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { TargetCreateRequest } from '../models';
// @ts-ignore
import type { TargetUpdateRequest } from '../models';
// @ts-ignore
import type { TargetWrapper } from '../models';
/**
 * TargetsApi - axios parameter creator
 */
export const TargetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new target with phone number and routing configuration.
         * @summary Create a target
         * @param {string} apiKey Your Retreaver API key
         * @param {TargetCreateRequest} targetCreateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTarget: async (apiKey: string, targetCreateRequest: TargetCreateRequest, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('createTarget', 'apiKey', apiKey)
            // verify required parameter 'targetCreateRequest' is not null or undefined
            assertParamExists('createTarget', 'targetCreateRequest', targetCreateRequest)
            const localVarPath = `/targets.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(targetCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a target by its internal ID.
         * @summary Delete a target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTarget: async (apiKey: string, id: number, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('deleteTarget', 'apiKey', apiKey)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTarget', 'id', id)
            const localVarPath = `/targets/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a target by its internal ID.
         * @summary Get a specific target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id The internal target ID
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetById: async (apiKey: string, id: number, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getTargetById', 'apiKey', apiKey)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTargetById', 'id', id)
            const localVarPath = `/targets/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all destination phone numbers (targets) that calls can be routed to.
         * @summary Get all targets
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets: async (apiKey: string, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getTargets', 'apiKey', apiKey)
            const localVarPath = `/targets.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clear calls contributing to the target\'s hard cap, resetting it to 0.
         * @summary Reset target hard cap
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetTargetCap: async (apiKey: string, id: number, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('resetTargetCap', 'apiKey', apiKey)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resetTargetCap', 'id', id)
            const localVarPath = `/targets/{id}/reset_cap.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update any attributes of an existing target.
         * @summary Update a target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {TargetUpdateRequest} targetUpdateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTarget: async (apiKey: string, id: number, targetUpdateRequest: TargetUpdateRequest, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('updateTarget', 'apiKey', apiKey)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTarget', 'id', id)
            // verify required parameter 'targetUpdateRequest' is not null or undefined
            assertParamExists('updateTarget', 'targetUpdateRequest', targetUpdateRequest)
            const localVarPath = `/targets/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(targetUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetsApi - functional programming interface
 */
export const TargetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new target with phone number and routing configuration.
         * @summary Create a target
         * @param {string} apiKey Your Retreaver API key
         * @param {TargetCreateRequest} targetCreateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTarget(apiKey: string, targetCreateRequest: TargetCreateRequest, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTarget(apiKey, targetCreateRequest, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TargetsApi.createTarget']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a target by its internal ID.
         * @summary Delete a target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTarget(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTarget(apiKey, id, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TargetsApi.deleteTarget']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a target by its internal ID.
         * @summary Get a specific target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id The internal target ID
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetById(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetById(apiKey, id, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TargetsApi.getTargetById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all destination phone numbers (targets) that calls can be routed to.
         * @summary Get all targets
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargets(apiKey: string, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetWrapper>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargets(apiKey, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TargetsApi.getTargets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Clear calls contributing to the target\'s hard cap, resetting it to 0.
         * @summary Reset target hard cap
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetTargetCap(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetTargetCap(apiKey, id, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TargetsApi.resetTargetCap']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update any attributes of an existing target.
         * @summary Update a target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {TargetUpdateRequest} targetUpdateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTarget(apiKey: string, id: number, targetUpdateRequest: TargetUpdateRequest, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTarget(apiKey, id, targetUpdateRequest, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TargetsApi.updateTarget']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TargetsApi - factory interface
 */
export const TargetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetsApiFp(configuration)
    return {
        /**
         * Create a new target with phone number and routing configuration.
         * @summary Create a target
         * @param {string} apiKey Your Retreaver API key
         * @param {TargetCreateRequest} targetCreateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTarget(apiKey: string, targetCreateRequest: TargetCreateRequest, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<TargetWrapper> {
            return localVarFp.createTarget(apiKey, targetCreateRequest, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a target by its internal ID.
         * @summary Delete a target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTarget(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTarget(apiKey, id, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a target by its internal ID.
         * @summary Get a specific target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id The internal target ID
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetById(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<TargetWrapper> {
            return localVarFp.getTargetById(apiKey, id, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all destination phone numbers (targets) that calls can be routed to.
         * @summary Get all targets
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets(apiKey: string, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<TargetWrapper>> {
            return localVarFp.getTargets(apiKey, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Clear calls contributing to the target\'s hard cap, resetting it to 0.
         * @summary Reset target hard cap
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetTargetCap(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetTargetCap(apiKey, id, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update any attributes of an existing target.
         * @summary Update a target
         * @param {string} apiKey Your Retreaver API key
         * @param {number} id 
         * @param {TargetUpdateRequest} targetUpdateRequest 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTarget(apiKey: string, id: number, targetUpdateRequest: TargetUpdateRequest, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<TargetWrapper> {
            return localVarFp.updateTarget(apiKey, id, targetUpdateRequest, companyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TargetsApi - object-oriented interface
 */
export class TargetsApi extends BaseAPI {
    /**
     * Create a new target with phone number and routing configuration.
     * @summary Create a target
     * @param {string} apiKey Your Retreaver API key
     * @param {TargetCreateRequest} targetCreateRequest 
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createTarget(apiKey: string, targetCreateRequest: TargetCreateRequest, companyId?: number, options?: RawAxiosRequestConfig) {
        return TargetsApiFp(this.configuration).createTarget(apiKey, targetCreateRequest, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a target by its internal ID.
     * @summary Delete a target
     * @param {string} apiKey Your Retreaver API key
     * @param {number} id 
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteTarget(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig) {
        return TargetsApiFp(this.configuration).deleteTarget(apiKey, id, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a target by its internal ID.
     * @summary Get a specific target
     * @param {string} apiKey Your Retreaver API key
     * @param {number} id The internal target ID
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getTargetById(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig) {
        return TargetsApiFp(this.configuration).getTargetById(apiKey, id, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all destination phone numbers (targets) that calls can be routed to.
     * @summary Get all targets
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getTargets(apiKey: string, companyId?: number, options?: RawAxiosRequestConfig) {
        return TargetsApiFp(this.configuration).getTargets(apiKey, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clear calls contributing to the target\'s hard cap, resetting it to 0.
     * @summary Reset target hard cap
     * @param {string} apiKey Your Retreaver API key
     * @param {number} id 
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public resetTargetCap(apiKey: string, id: number, companyId?: number, options?: RawAxiosRequestConfig) {
        return TargetsApiFp(this.configuration).resetTargetCap(apiKey, id, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update any attributes of an existing target.
     * @summary Update a target
     * @param {string} apiKey Your Retreaver API key
     * @param {number} id 
     * @param {TargetUpdateRequest} targetUpdateRequest 
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateTarget(apiKey: string, id: number, targetUpdateRequest: TargetUpdateRequest, companyId?: number, options?: RawAxiosRequestConfig) {
        return TargetsApiFp(this.configuration).updateTarget(apiKey, id, targetUpdateRequest, companyId, options).then((request) => request(this.axios, this.basePath));
    }
}

