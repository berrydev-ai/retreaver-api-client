/* tslint:disable */
/* eslint-disable */
/**
 * Retreaver Core API
 * The Retreaver Core API can be used to automate core business processes, like changing where calls are routed, and many other features that would normally be accessed through our account portal.  **Authentication**: All requests require an API key passed as a query parameter `api_key`. If you have access to multiple companies, also pass `company_id`.  **Format**: The API supports both JSON and XML. Use `.json` or `.xml` file extensions in the URL and set the appropriate Content-Type header.  **Pagination**: Returns 25 results per page. Use the Link HTTP header to navigate pages.  **Security Warning**: Never expose your API key publicly as it can be used to access your entire Retreaver account without restriction!
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CallV2Wrapper } from '../models';
/**
 * CallsV2Api - axios parameter creator
 */
export const CallsV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve detailed V2 information about a specific call using its UUID.
         * @summary Get a specific call by UUID (V2)
         * @param {string} apiKey Your Retreaver API key
         * @param {string} uuid 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallByUuidV2: async (apiKey: string, uuid: string, companyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getCallByUuidV2', 'apiKey', apiKey)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getCallByUuidV2', 'uuid', uuid)
            const localVarPath = `/api/v2/calls/{uuid}.json`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Version 2 of the calls API with additional fields like affiliate_name, campaign_name, connected status, profit calculations, etc.
         * @summary Get recent calls (V2)
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {string} [createdAtStart] Return calls created after this date (RFC3339 format)
         * @param {string} [createdAtEnd] Return calls created before this date (RFC3339 format)
         * @param {GetCallsV2SortByEnum} [sortBy] 
         * @param {GetCallsV2OrderEnum} [order] 
         * @param {string} [caller] 
         * @param {string} [clientAfid] 
         * @param {string} [clientCid] 
         * @param {string} [clientTid] 
         * @param {string} [subId] 
         * @param {boolean} [callFlowEvents] Include call flow events showing what happened during the call
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallsV2: async (apiKey: string, companyId?: number, createdAtStart?: string, createdAtEnd?: string, sortBy?: GetCallsV2SortByEnum, order?: GetCallsV2OrderEnum, caller?: string, clientAfid?: string, clientCid?: string, clientTid?: string, subId?: string, callFlowEvents?: boolean, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getCallsV2', 'apiKey', apiKey)
            const localVarPath = `/api/v2/calls.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "api_key", configuration)

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (createdAtStart !== undefined) {
                localVarQueryParameter['created_at_start'] = (createdAtStart as any instanceof Date) ?
                    (createdAtStart as any).toISOString() :
                    createdAtStart;
            }

            if (createdAtEnd !== undefined) {
                localVarQueryParameter['created_at_end'] = (createdAtEnd as any instanceof Date) ?
                    (createdAtEnd as any).toISOString() :
                    createdAtEnd;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (caller !== undefined) {
                localVarQueryParameter['caller'] = caller;
            }

            if (clientAfid !== undefined) {
                localVarQueryParameter['client_afid'] = clientAfid;
            }

            if (clientCid !== undefined) {
                localVarQueryParameter['client_cid'] = clientCid;
            }

            if (clientTid !== undefined) {
                localVarQueryParameter['client_tid'] = clientTid;
            }

            if (subId !== undefined) {
                localVarQueryParameter['sub_id'] = subId;
            }

            if (callFlowEvents !== undefined) {
                localVarQueryParameter['call_flow_events'] = callFlowEvents;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallsV2Api - functional programming interface
 */
export const CallsV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallsV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve detailed V2 information about a specific call using its UUID.
         * @summary Get a specific call by UUID (V2)
         * @param {string} apiKey Your Retreaver API key
         * @param {string} uuid 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallByUuidV2(apiKey: string, uuid: string, companyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallV2Wrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallByUuidV2(apiKey, uuid, companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallsV2Api.getCallByUuidV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Version 2 of the calls API with additional fields like affiliate_name, campaign_name, connected status, profit calculations, etc.
         * @summary Get recent calls (V2)
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {string} [createdAtStart] Return calls created after this date (RFC3339 format)
         * @param {string} [createdAtEnd] Return calls created before this date (RFC3339 format)
         * @param {GetCallsV2SortByEnum} [sortBy] 
         * @param {GetCallsV2OrderEnum} [order] 
         * @param {string} [caller] 
         * @param {string} [clientAfid] 
         * @param {string} [clientCid] 
         * @param {string} [clientTid] 
         * @param {string} [subId] 
         * @param {boolean} [callFlowEvents] Include call flow events showing what happened during the call
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallsV2(apiKey: string, companyId?: number, createdAtStart?: string, createdAtEnd?: string, sortBy?: GetCallsV2SortByEnum, order?: GetCallsV2OrderEnum, caller?: string, clientAfid?: string, clientCid?: string, clientTid?: string, subId?: string, callFlowEvents?: boolean, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CallV2Wrapper>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallsV2(apiKey, companyId, createdAtStart, createdAtEnd, sortBy, order, caller, clientAfid, clientCid, clientTid, subId, callFlowEvents, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallsV2Api.getCallsV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CallsV2Api - factory interface
 */
export const CallsV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallsV2ApiFp(configuration)
    return {
        /**
         * Retrieve detailed V2 information about a specific call using its UUID.
         * @summary Get a specific call by UUID (V2)
         * @param {string} apiKey Your Retreaver API key
         * @param {string} uuid 
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallByUuidV2(apiKey: string, uuid: string, companyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<CallV2Wrapper> {
            return localVarFp.getCallByUuidV2(apiKey, uuid, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Version 2 of the calls API with additional fields like affiliate_name, campaign_name, connected status, profit calculations, etc.
         * @summary Get recent calls (V2)
         * @param {string} apiKey Your Retreaver API key
         * @param {number} [companyId] Required if you have access to multiple companies
         * @param {string} [createdAtStart] Return calls created after this date (RFC3339 format)
         * @param {string} [createdAtEnd] Return calls created before this date (RFC3339 format)
         * @param {GetCallsV2SortByEnum} [sortBy] 
         * @param {GetCallsV2OrderEnum} [order] 
         * @param {string} [caller] 
         * @param {string} [clientAfid] 
         * @param {string} [clientCid] 
         * @param {string} [clientTid] 
         * @param {string} [subId] 
         * @param {boolean} [callFlowEvents] Include call flow events showing what happened during the call
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallsV2(apiKey: string, companyId?: number, createdAtStart?: string, createdAtEnd?: string, sortBy?: GetCallsV2SortByEnum, order?: GetCallsV2OrderEnum, caller?: string, clientAfid?: string, clientCid?: string, clientTid?: string, subId?: string, callFlowEvents?: boolean, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CallV2Wrapper>> {
            return localVarFp.getCallsV2(apiKey, companyId, createdAtStart, createdAtEnd, sortBy, order, caller, clientAfid, clientCid, clientTid, subId, callFlowEvents, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallsV2Api - object-oriented interface
 */
export class CallsV2Api extends BaseAPI {
    /**
     * Retrieve detailed V2 information about a specific call using its UUID.
     * @summary Get a specific call by UUID (V2)
     * @param {string} apiKey Your Retreaver API key
     * @param {string} uuid 
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCallByUuidV2(apiKey: string, uuid: string, companyId?: number, options?: RawAxiosRequestConfig) {
        return CallsV2ApiFp(this.configuration).getCallByUuidV2(apiKey, uuid, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Version 2 of the calls API with additional fields like affiliate_name, campaign_name, connected status, profit calculations, etc.
     * @summary Get recent calls (V2)
     * @param {string} apiKey Your Retreaver API key
     * @param {number} [companyId] Required if you have access to multiple companies
     * @param {string} [createdAtStart] Return calls created after this date (RFC3339 format)
     * @param {string} [createdAtEnd] Return calls created before this date (RFC3339 format)
     * @param {GetCallsV2SortByEnum} [sortBy] 
     * @param {GetCallsV2OrderEnum} [order] 
     * @param {string} [caller] 
     * @param {string} [clientAfid] 
     * @param {string} [clientCid] 
     * @param {string} [clientTid] 
     * @param {string} [subId] 
     * @param {boolean} [callFlowEvents] Include call flow events showing what happened during the call
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCallsV2(apiKey: string, companyId?: number, createdAtStart?: string, createdAtEnd?: string, sortBy?: GetCallsV2SortByEnum, order?: GetCallsV2OrderEnum, caller?: string, clientAfid?: string, clientCid?: string, clientTid?: string, subId?: string, callFlowEvents?: boolean, page?: number, options?: RawAxiosRequestConfig) {
        return CallsV2ApiFp(this.configuration).getCallsV2(apiKey, companyId, createdAtStart, createdAtEnd, sortBy, order, caller, clientAfid, clientCid, clientTid, subId, callFlowEvents, page, options).then((request) => request(this.axios, this.basePath));
    }
}

export enum GetCallsV2SortByEnum {
    CreatedAt = 'created_at',
    UpdatedAt = 'updated_at'
}
export enum GetCallsV2OrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
